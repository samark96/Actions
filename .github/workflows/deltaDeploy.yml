name: deltaDeploy

on:
  push:
    branches: [ "deltaDeploy" ]
    paths:
      -  'force-app/**'  
  workflow_dispatch:
env:
  GH_TOKEN: ${{ secrets.githubCLI }}

jobs:
  deltaDeploy:
    runs-on: windows-latest
    environment: qa #pass it in a variable if manually triggered.
    env:
      fromCommitId: ${{ vars.fromCommitId }}
      userName: ${{ vars.userName }}
      consumerKey: ${{ vars.consumerKey }}
      instanceURL: ${{ vars.instanceURL }}
      orgAlias: ${{ vars.orgAlias }}
      deltaDeploytestLevel: ${{ vars.deltaDeploytestLevel }}
      targetPath: ${{ vars.targetPath }}
      deployWait: ${{ vars.deployWait }}
      secureKey: ${{ secrets.secureKey }}

    steps:
      - name: checkoutSourceCode
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: configureGIT
        run: |
          git config --global --add safe.directory /__w/Actions/Actions
          git config --global user.email "GitHub@mass.gov"
          git config --global user.name "GitHub User"
      
      - name: getChanges
        shell: pwsh
        run: |
          ./build/customScripts/getChanges.ps1
      
      - name: packageChanges
        shell: pwsh
        run: |
          ./build/customScripts/packageChanges.ps1

      - name: extractSFCLI
        run: |
          tar -xzvf build/sf-win32-x64.tar.gz

      - name: sfJWTAuth
        run: |
          echo "$env:secureKey" > secure.key
          ./sf/bin/sf org login jwt --username ${{ env.userName }} --jwt-key-file=secure.key --client-id ${{ env.consumerKey }} --instance-url ${{ env.instanceURL }} --alias ${{ env.orgAlias }}

      - name: deltaDeploy
        shell: pwsh
        run: |
          $specifiedClasses = Get-Content -Path './build/specifyTestClasses.txt' -Raw
          ./sf/bin/sf project deploy start -d ${{ env.targetPath }} -o ${{ env.orgAlias }} -l ${{ env.deltaDeploytestLevel }} -t "$specifiedClasses" -w ${{ env.deployWait }}

      - name: updateVariable
        shell: pwsh
        run: |
          gh variable set fromCommitId --body "$env:latestCommitId" --env qa        